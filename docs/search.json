[
  {
    "objectID": "Test Review & Data Manipulation.html",
    "href": "Test Review & Data Manipulation.html",
    "title": "Test Review & Manipulating Data",
    "section": "",
    "text": "The relative path would just be “homework”.\n\n\nPackages are useful because they are a collection of functions that can do all sorts of different things, so instead of having to code everything up ourselves in BaseR, we can instead re-use code that other people wrote by calling their package. Moreover, another benefit to using packages is that the functions within the package are written in a consistent syntax, reducing potential conflicts/errors in our code.\n\n\nGit is a version control software that tracks changes made to files. Github is an online hosting service for Git-based projects; on Github programmers can store, share, and and edit files that they have been working on, and in particular easily collaborate with others.\n\n\nA tibble is a special type of data frame. They look a little nicer than a generic data frame, and more importantly they do not coerce down to a vector when we subset to only one column using “[” (i.e. it just becomes a smaller tibble).\n\n\nUsing the chaining operator, we can rewrite the function as:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\niris |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n   Petal.Length Petal.Width Species\n1           1.4         0.2  setosa\n2           1.4         0.2  setosa\n3           1.3         0.2  setosa\n4           1.5         0.2  setosa\n5           1.4         0.2  setosa\n6           1.4         0.3  setosa\n7           1.5         0.2  setosa\n8           1.4         0.2  setosa\n9           1.5         0.1  setosa\n10          1.5         0.2  setosa\n11          1.4         0.1  setosa\n12          1.1         0.1  setosa\n13          1.2         0.2  setosa\n14          1.5         0.4  setosa\n15          1.3         0.4  setosa\n16          1.4         0.3  setosa\n17          1.5         0.3  setosa\n18          1.5         0.4  setosa\n19          1.0         0.2  setosa\n20          1.5         0.2  setosa\n21          1.4         0.2  setosa\n22          1.5         0.4  setosa\n23          1.5         0.1  setosa\n24          1.4         0.2  setosa\n25          1.5         0.2  setosa\n26          1.2         0.2  setosa\n27          1.3         0.2  setosa\n28          1.4         0.1  setosa\n29          1.3         0.2  setosa\n30          1.5         0.2  setosa\n31          1.3         0.3  setosa\n32          1.3         0.3  setosa\n33          1.3         0.2  setosa\n34          1.4         0.3  setosa\n35          1.4         0.2  setosa\n36          1.5         0.2  setosa\n37          1.4         0.2  setosa\n\n\nMuch easier to read and understand!"
  },
  {
    "objectID": "Test Review & Data Manipulation.html#task-1-conceptual-questions",
    "href": "Test Review & Data Manipulation.html#task-1-conceptual-questions",
    "title": "Test Review & Manipulating Data",
    "section": "",
    "text": "The relative path would just be “homework”.\n\n\nPackages are useful because they are a collection of functions that can do all sorts of different things, so instead of having to code everything up ourselves in BaseR, we can instead re-use code that other people wrote by calling their package. Moreover, another benefit to using packages is that the functions within the package are written in a consistent syntax, reducing potential conflicts/errors in our code.\n\n\nGit is a version control software that tracks changes made to files. Github is an online hosting service for Git-based projects; on Github programmers can store, share, and and edit files that they have been working on, and in particular easily collaborate with others.\n\n\nA tibble is a special type of data frame. They look a little nicer than a generic data frame, and more importantly they do not coerce down to a vector when we subset to only one column using “[” (i.e. it just becomes a smaller tibble).\n\n\nUsing the chaining operator, we can rewrite the function as:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\niris |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n   Petal.Length Petal.Width Species\n1           1.4         0.2  setosa\n2           1.4         0.2  setosa\n3           1.3         0.2  setosa\n4           1.5         0.2  setosa\n5           1.4         0.2  setosa\n6           1.4         0.3  setosa\n7           1.5         0.2  setosa\n8           1.4         0.2  setosa\n9           1.5         0.1  setosa\n10          1.5         0.2  setosa\n11          1.4         0.1  setosa\n12          1.1         0.1  setosa\n13          1.2         0.2  setosa\n14          1.5         0.4  setosa\n15          1.3         0.4  setosa\n16          1.4         0.3  setosa\n17          1.5         0.3  setosa\n18          1.5         0.4  setosa\n19          1.0         0.2  setosa\n20          1.5         0.2  setosa\n21          1.4         0.2  setosa\n22          1.5         0.4  setosa\n23          1.5         0.1  setosa\n24          1.4         0.2  setosa\n25          1.5         0.2  setosa\n26          1.2         0.2  setosa\n27          1.3         0.2  setosa\n28          1.4         0.1  setosa\n29          1.3         0.2  setosa\n30          1.5         0.2  setosa\n31          1.3         0.3  setosa\n32          1.3         0.3  setosa\n33          1.3         0.2  setosa\n34          1.4         0.3  setosa\n35          1.4         0.2  setosa\n36          1.5         0.2  setosa\n37          1.4         0.2  setosa\n\n\nMuch easier to read and understand!"
  },
  {
    "objectID": "Test Review & Data Manipulation.html#task-2-reading-delimited-data",
    "href": "Test Review & Data Manipulation.html#task-2-reading-delimited-data",
    "title": "Test Review & Manipulating Data",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\nFirst, we will read data into R from the Glass data dataset available at https://www4.stat.ncsu.edu/~online/datasets/glass.data. We do this using the tidyverse package, calling the read_csv() function; note that since the data does not have column names, we add that ourselves using the function’s arguments.\n\nlibrary(tidyverse)\n\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type of Glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type of Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe `Type of Glass`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                  1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                  1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                  1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                  1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                  1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26               1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                  1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                  1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                  1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11               1\n# ℹ 204 more rows\n\n\nNext, we rename the values in the “Type of Glass” column using the mutate function.\n\nglass_data |&gt;\n  mutate(`Type of Glass` = ifelse(`Type of Glass` == 1, \"building_windows_float_processed\", \n          ifelse(`Type of Glass` == 2, \"building_windows_non_float_process\",\n                 ifelse(`Type of Glass` == 3, \"vehicle_windows_float_processed\",\n                        ifelse(`Type of Glass` == 4, \"vehicle_windows_non_float_processed (none in this database)\",\n                               ifelse(`Type of Glass` == 5, \"containers\",\n                                      ifelse(`Type of Glass` == 6, \"tableware\",\n                                             ifelse(`Type of Glass` == 7, \"headlamps\",\"Unknown\"))))))))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe `Type of Glass`  \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\nNext, we use the filter() function to keep only the observations where the “Fe” variable is less than 0.2 and the “Type of Glass” variable is either “tableware” or “headlamps.”\n\nglass_data |&gt;\n  mutate(`Type of Glass` = ifelse(`Type of Glass` == 1, \"building_windows_float_processed\", \n          ifelse(`Type of Glass` == 2, \"building_windows_non_float_process\",\n                 ifelse(`Type of Glass` == 3, \"vehicle_windows_float_processed\",\n                        ifelse(`Type of Glass` == 4, \"vehicle_windows_non_float_processed (none in this database)\",\n                               ifelse(`Type of Glass` == 5, \"containers\",\n                                      ifelse(`Type of Glass` == 6, \"tableware\",\n                                             ifelse(`Type of Glass` == 7, \"headlamps\",\"Unknown\")))))))) |&gt; \n  filter(Fe &lt; 0.2, `Type of Glass` == \"tableware\" | `Type of Glass` == \"headlamps\")\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe `Type of Glass`\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;          \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware      \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware      \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware      \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware      \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware      \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware      \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware      \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware      \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware      \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps      \n# ℹ 28 more rows\n\n\nNow we’ll look at another dataset, available at https://www4.stat.ncsu.edu/~online/datasets/yeast.data. As before, we need to read the data into R (note that the file is delimited by 2 spaces).\n\nyeast &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", delim = \"  \", col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nNext, we remove the “seq_name” and “nuc” columns.\n\nyeast |&gt;\n  select(mcg:vac, class)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\nLastly, we add columns corresponding to the mean and median of each numeric variable (“mcg”, “gvh”, “alm”, “mit”, “erl”, “pox”, and “vac”) at each class grouping.\n\nyeast |&gt;\n  select(mcg:vac, class) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [44]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.531\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.531\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.531\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.453       0.45    0.458\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.531\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.480       0.48    0.469\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.531\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.453       0.45    0.458\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.531\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.480       0.48    0.469\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "Test Review & Data Manipulation.html#task-3-combining-excel-and-delimited-data",
    "href": "Test Review & Data Manipulation.html#task-3-combining-excel-and-delimited-data",
    "title": "Test Review & Manipulating Data",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\nFirst we import excel data from the “white-wine” excel file and print out a tibble of the first sheet.\n\nlibrary(readxl)\n\n#read in first sheet\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\",\n                         sheet = excel_sheets(\"white-wine.xlsx\")[1])\n\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nNext we rename the column names by reading in the variable names from the second sheet of the “white wine” excel file, and then overwriting the current column names with with the data from the second sheet.\n\n#read in second sheet\nwhite_wine_variables &lt;- read_excel(\"white-wine.xlsx\",\n                                   sheet = excel_sheets(\"white-wine.xlsx\")[2])\n\nwhite_wine_variables\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\n\n#overwrite column names of white_wine with the data from white_wine_variables\ncolnames(white_wine) &lt;- white_wine_variables$Variables\n\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nNow we want to add a column to the “white_wine” tibble which indicates the color of the wine (that is, it will have “white” for every entry since all wines are white).\n\nwhite_wine$`Wine Color` &lt;- \"white\"\n\nwhite_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   `Wine Color` &lt;chr&gt;\n\n\nNext we will import data from the semi-colon delimited file red-wine.csv available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.\n\n#read in the data from the file\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n                       delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#replace the column names with the data from the second sheet of the white-wine excel file\ncolnames(red_wine) &lt;- white_wine_variables$Variables\n\n#add column indicating the color of the wine (i.e. it will have \"red\" for every entry)\nred_wine$`Wine Color` &lt;- \"red\"\n\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   `Wine Color` &lt;chr&gt;\n\n\nNow that we have two tibbles with the same column variables, we will combine them to create one big tibble.\n\nwine_data &lt;- bind_rows(white_wine, red_wine)\nwine_data \n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   `Wine Color` &lt;chr&gt;\n\n\nNext we filter out everything except the observations where “quality” is greater than 6.5 and “alcohol” is less than 132.\n\nwine_data |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132)\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   `Wine Color` &lt;chr&gt;\n\n\nAnd now we sort the data from the above tibble so that the “quality” column is ordered from highest to lowest.\n\nwine_data |&gt; \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   `Wine Color` &lt;chr&gt;\n\n\nFrom the tibble above, we now select just the columns that contain “acid” in their name, and the columns “alcohol”, “quality”, and “Wine Color” (i.e. type).\n\nwine_data |&gt; \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), \"alcohol\", \"quality\", \"Wine Color\")\n\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol quality `Wine Color`\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       \n 1            91             0.27        0.45     104       9 white       \n 2            66             0.36        0.29     124       9 white       \n 3            74             0.24        0.36     125       9 white       \n 4            69             0.36        0.34     127       9 white       \n 5            71             0.26        0.49     129       9 white       \n 6            62             0.66        0.48     128       8 white       \n 7            62             0.66        0.48     128       8 white       \n 8            68             0.26        0.42     105       8 white       \n 9            67             0.23        0.31     107       8 white       \n10            67             0.23        0.31     107       8 white       \n# ℹ 1,196 more rows\n\n\nLastly, from the above tibble we add columns computing the mean and standard deviation for the value of “alcohol” for each setting of (i.e. grouped by) the quality variable.\n\nwine_data |&gt; \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), \"alcohol\", \"quality\", \"Wine Color\") |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol, list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol quality `Wine Color`\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       \n 1            91             0.27        0.45     104       9 white       \n 2            66             0.36        0.29     124       9 white       \n 3            74             0.24        0.36     125       9 white       \n 4            69             0.36        0.34     127       9 white       \n 5            71             0.26        0.49     129       9 white       \n 6            62             0.66        0.48     128       8 white       \n 7            62             0.66        0.48     128       8 white       \n 8            68             0.26        0.42     105       8 white       \n 9            67             0.23        0.31     107       8 white       \n10            67             0.23        0.31     107       8 white       \n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;"
  }
]